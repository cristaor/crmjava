<%!
  public static String indentifyUserAgent(String sUserAgent) {
    if (sUserAgent==null) {
      return "Unknown";
    } else if (sUserAgent.length()==0) {
      return "Unknown";    
    } else if (sUserAgent.startsWith("Mozilla/4.0 (compatible; MSIE 6.0;")) {
		  return "Internet Explorer 6.0";    
    } else if (sUserAgent.startsWith("Mozilla/4.0 (compatible; MSIE 7.0;")) {
		  return "Internet Explorer 7.0";    
    } else if (sUserAgent.startsWith("Mozilla/4.0 (compatible; MSIE 8.0;")) {
		  return "Internet Explorer 8.0";    
    } else if (sUserAgent.indexOf("Firefox/2.0")>0) {
		  return "Firefox 2.0";    
    } else if (sUserAgent.indexOf("Firefox/3.0")>0) {
		  return "Firefox 3.0";    
    } else if (sUserAgent.indexOf("Firefox/3.5")>0) {
		  return "Firefox 3.5";    
    } else if (sUserAgent.indexOf("iPhone")>0) {
		  return "iPhone";    
    } else if (sUserAgent.indexOf("Android")>0) {
		  return "Android";    
    } else if (sUserAgent.indexOf("Minimo")>0) {
		  return "Minimo";    
    } else if (sUserAgent.indexOf("Lotus-Notes")>0) {
		  return "Lotus Notes";    
    } else if (sUserAgent.indexOf("Thunderbird")>0) {
		  return "Thunderbird";    
    } else if (sUserAgent.indexOf("Safari")>0) {
		  return "Safari";  
    } else if (sUserAgent.indexOf("Chrome")>0) {
		  return "Google Chrome"; 
    } else if (sUserAgent.indexOf("OutlookConnector")>0) {
		  return "Outlook"; 
    } else if (sUserAgent.indexOf("Evolution")>0) {
		  return "Evolution";
    } else if (sUserAgent.indexOf("Gecko")>0) {
		  return "Other Gecko";
    } else {
		  return "Other";
    }    
  }
%><% 
/*
  Copyright (C) 2003-2009  Know Gate S.L. All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

  2. The end-user documentation included with the redistribution,
     if any, must include the following acknowledgment:
     "This product includes software parts from hipergate
     (http://www.hipergate.org/)."
     Alternately, this acknowledgment may appear in the software itself,
     if and wherever such third-party acknowledgments normally appear.

  3. The name hipergate must not be used to endorse or promote products
     derived from this software without prior written permission.
     Products derived from this software may not be called hipergate,
     nor may hipergate appear in their name, without prior written
     permission.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  You should have received a copy of hipergate License with this code;
  if not, visit http://www.hipergate.org or mail to info@hipergate.org
*/

  if (autenticateSession(GlobalDBBind, request, response)<0) return;
  
  response.addHeader ("Pragma", "no-cache");
  response.addHeader ("cache-control", "no-store");
  response.setIntHeader("Expires", 0);

  final String PAGE_NAME = "job_followup_stats";
  
  String sSkin = getCookie(request, "skin", "xp");
  String sLanguage = getNavigatorLanguage(request);
  TreeMap<String,Float> oAgents = new TreeMap<String,Float>();

  String gu_job = request.getParameter("gu_job");
  String gu_job_group = request.getParameter("gu_job_group");
  String gu_workarea = null;
  
  String sWhere = "";
  if (gu_job!=null && gu_job_group!=null) {
    sWhere = "j."+DB.gu_job+"='"+gu_job+"' OR j."+DB.gu_job+" IN (SELECT "+DB.gu_job+" FROM "+DB.k_jobs+" WHERE "+DB.gu_job_group+"='"+gu_job_group+"')";
  } else if (gu_job!=null) {
    sWhere = "j."+DB.gu_job+"='"+gu_job+"'";
  } else {
    sWhere = "j."+DB.gu_job+" IN (SELECT "+DB.gu_job+" FROM "+DB.k_jobs+" WHERE "+DB.gu_job_group+"='"+gu_job_group+"')";
  }
  
  JDCConnection oConn = null;

  DBSubset oJobs = new DBSubset(DB.k_jobs+" j", DB.gu_job+","+DB.tl_job+","+DB.tx_parameters, sWhere, 1);
  
  DBSubset oAdHoc = new DBSubset(DB.k_adhoc_mailings,
  															 DB.pg_mailing+","+DB.nm_mailing+","+DB.tx_subject+","+DB.tx_email_from+","+DB.tx_email_reply+","+DB.nm_from,
  															 DB.gu_mailing+"=?", 1);

  DBSubset oActiv = new DBSubset(DB.k_activities, DB.tl_activity, DB.gu_mailing+"=?", 1);

  DBSubset oLists = new DBSubset(DB.k_x_adhoc_mailing_list+" x,"+DB.k_lists+" l",
  															 DB.tx_subject, "x."+DB.gu_list+"=l."+DB.gu_list+" AND x."+DB.gu_mailing+"=?", 20);
  															 
  DBSubset oPgSet = new DBSubset(DB.k_pagesets,
  															 "NULL AS "+DB.pg_mailing+","+DB.nm_pageset+",NULL AS "+DB.tx_subject+",NULL AS "+DB.tx_email_from+",NULL AS "+DB.tx_email_reply+", NULL AS "+DB.nm_from,
  															 DB.gu_pageset+"=?", 1);
  
	DBSubset oAtoms = new DBSubset(DB.k_job_atoms+" j", DB.tx_email+","+DB.dt_execution+","+DB.id_status+","+DB.tx_log+","+DB.pg_atom, sWhere, 100);

	DBSubset oArchived = new DBSubset(DB.k_job_atoms_archived+" j", DB.tx_email+","+DB.dt_execution+","+DB.id_status+","+DB.tx_log+","+DB.pg_atom,
																	  sWhere+" ORDER BY "+DB.pg_atom, 100);

	DBSubset oDateRange = new DBSubset(DB.k_job_atoms_archived+" j", "MIN("+DB.dt_execution+"),MAX("+DB.dt_execution+")", sWhere, 1);

	DBSubset oWebBeacons = new DBSubset(DB.k_job_atoms_tracking+" j",
	                                    DB.tx_email+","+DB.dt_action+","+DB.user_agent+","+DB.pg_atom,
	                                    sWhere+" ORDER BY "+DB.pg_atom+","+DB.dt_action, 100);

	DBSubset oBlack = new DBSubset(DB.k_global_black_list, DB.tx_email, DB.gu_workarea+" IN (?,'00000000000000000000000000000000')", 2000);

	DBSubset oGrey = new DBSubset("k_grey_list", DB.tx_email, null, 2000);

  DBSubset oEmailAddrs = null;
  int iAtoms=0, iWebBeacons=0, iWebBeaconsUnique=0;
  float nAgents = 0f;
  int nAborted=0, nFinished=0, nPending=0, nSuspended=0, nRunning=0, nInterrupted=0, nBlackListed=0, nGreyListed=0, nLists=0;
	int nWebmails=0, nThickClients=0;
	int nOpen24=0, nOpen72=0;
	int iMinAtom = -1, iMaxAtom = -1;
	int[] aPgAtoms = null;
	int nPgAtoms = 0;
  int iIxMbr;
  String sTxSubject = null;  
  String sUserAgent;
  String sDisplayName;
  Integer oPgAtom;
  DBSubset oClicks = new DBSubset ("k_job_atoms_clicks c, k_urls u, k_jobs j",
                                   "c.tx_email,c.dt_action,c.ip_addr,c.gu_url,u.url_addr,u.tx_title",
                                   "u.gu_workarea=? AND "+sWhere+" AND "+
                                   "c.gu_url=u.gu_url AND c.gu_job=j.gu_job ORDER BY 2 DESC", 1000);
  int nClicks = 0;
  HashMap<String,Integer> oUrlCounter = new HashMap<String,Integer>();
  HashMap<String,Integer> oClickCounter = new HashMap<String,Integer>();
  ArrayList<java.util.Map.Entry<String, Integer>> aKeys = null;
  
  try {

    oConn = GlobalDBBind.getConnection(PAGE_NAME);  
		
		gu_workarea = DBCommand.queryStr(oConn, "SELECT "+DB.gu_workarea+" FROM "+DB.k_jobs+" j WHERE "+sWhere);
		sTxSubject = DBCommand.queryStr(oConn, "SELECT "+DB.tl_job+" FROM "+DB.k_jobs+" j WHERE "+sWhere);

		oBlack.load(oConn, new Object[]{gu_workarea});
	  oBlack.sortBy(0);
	  
	  if (GlobalDBBind.exists(oConn, "k_grey_list", "U")) {
		  oGrey.load(oConn);
	    oGrey.sortBy(0);
	  }
    
    int nJobs = oJobs.load(oConn);

    for (int j=0; j<nJobs; j++) {
      String sTxParams = oJobs.getStringNull(2,j,"");
      if (sTxParams.indexOf("attachimages:true")>=0) {
        nThickClients += DBCommand.queryCount(oConn, "*", DB.k_job_atoms_archived, DB.gu_job+"='"+oJobs.getString(0,j)+"'");
      } else {
        nWebmails += DBCommand.queryCount(oConn, "*", DB.k_job_atoms_archived, DB.gu_job+"='"+oJobs.getString(0,j)+"'");      
      }
    }
    
	  if (gu_job_group!=null) {
	    oAdHoc.load(oConn, new Object[]{gu_job_group});
	    if (oAdHoc.getRowCount()==0) {
	      oPgSet.load(oConn, new Object[]{gu_job_group});
	      oAdHoc.union(oPgSet);
	    }
	    if (oAdHoc.getRowCount()>0) {
	      nLists = oLists.load(oConn, new Object[]{gu_job_group});
	      oActiv.load(oConn, new Object[]{gu_job_group});
	    }
	  }
		
		oPgAtom = DBCommand.queryMinInt(oConn, DB.pg_atom, DB.k_job_atoms_tracking+" j", sWhere);
		if (null!=oPgAtom) iMinAtom = oPgAtom.intValue();
		oPgAtom = DBCommand.queryMaxInt(oConn, DB.pg_atom, DB.k_job_atoms_tracking+" j", sWhere);
		if (null!=oPgAtom) iMaxAtom = oPgAtom.intValue();
		if (iMinAtom!=-1 && iMaxAtom!=-1) {
		    nPgAtoms = iMaxAtom-iMinAtom+1;
		    aPgAtoms = new int[nPgAtoms];
		    Arrays.fill(aPgAtoms, 0);
		}

		oAtoms.load(oConn);
		oArchived.load(oConn);
		oAtoms.union(oArchived);
		iAtoms = oAtoms.getRowCount();

		oDateRange.load(oConn);
		iWebBeacons = oWebBeacons.load(oConn);
    oEmailAddrs = new DBSubset(DB.k_member_address, DB.tx_email+","+DB.gu_contact+","+DB.gu_company+","+DB.tx_name+","+DB.tx_surname+","+DB.nm_legal, DB.gu_workarea+"=? AND "+
  														 DB.tx_email+" IN (SELECT "+DB.tx_email+" FROM "+DB.k_job_atoms_tracking+" j WHERE "+sWhere+") ORDER BY 1", 100);
		oEmailAddrs.load(oConn, new Object[]{gu_workarea});
		
		nClicks = oClicks.load(oConn, new Object[]{gu_workarea});

    oConn.close(PAGE_NAME);

    for (int u=0; u<nClicks; u++) {
		  String sEmail = oClicks.getString(0,u);
		  String sGuUrl = oClicks.getString(3,u);

		  if (oUrlCounter.containsKey(sGuUrl)) {
		    Integer iCount = oUrlCounter.get(sGuUrl);
		    oUrlCounter.remove(sGuUrl);
		    oUrlCounter.put(sGuUrl, new Integer(iCount.intValue()+1));
		  } else {
		    oUrlCounter.put(sGuUrl, new Integer(1));		  
		  }
		  if (oClickCounter.containsKey(sEmail)) {
		    Integer iCount = oClickCounter.get(sEmail);
		    oClickCounter.remove(sEmail);
		    oClickCounter.put(sEmail, new Integer(iCount.intValue()+1));
		  } else {
		    oClickCounter.put(sEmail, new Integer(1));		  
		  }
		} // next

    aKeys = new ArrayList<java.util.Map.Entry<String, Integer>>(oUrlCounter.entrySet());
	  Collections.sort(aKeys, new Comparator<java.util.Map.Entry<String, Integer>>() {
			                      public int compare(java.util.Map.Entry<String, Integer> o1, java.util.Map.Entry<String, Integer> o2)
			                      { return o2.getValue().compareTo(o1.getValue());}});
  }
  catch (NullPointerException e) {  
    if (oConn!=null)
      if (!oConn.isClosed()) oConn.close(PAGE_NAME);
    oConn = null;
    response.sendRedirect (response.encodeRedirectUrl ("../common/errmsg.jsp?title=SQLException&desc=" + e.getLocalizedMessage() + "&resume=_close"));  
  }
  
  if (null==oConn) return;  
  oConn = null;  

	for (int a=0; a<iAtoms; a++) {

    if (oBlack.binaryFind(0, oAtoms.getString(0,a))>=0) nBlackListed++;
    if (oGrey.binaryFind (0, oAtoms.getString(0,a))>=0) nGreyListed++ ;

	  switch (oAtoms.getShort(2,a)) {
		  case Atom.STATUS_ABORTED:
		    nAborted++;
		    break;
		  case Atom.STATUS_FINISHED:
		    nFinished++;
		    break;
		  case Atom.STATUS_SUSPENDED:
		    nSuspended++;
		    break;
		  case Atom.STATUS_RUNNING:
		    nRunning++;
		    break;
		  case Atom.STATUS_INTERRUPTED:
		    nInterrupted++;
		    break;	  
	  }
	} // next
	
	for (int b=0; b<iWebBeacons; b++) {
	  
	  int iIxAtom = oWebBeacons.getInt(3,b)-iMinAtom;

	  int nReads = aPgAtoms[iIxAtom];
	  
	  if (nReads==0) {
	    iWebBeaconsUnique++;

      int a = oAtoms.binaryFind(4, new Integer(oWebBeacons.getInt(3,b)));            
      if (a>=0) {
		    int nDays = Calendar.DaysBetween(oAtoms.getDate(1,a),oWebBeacons.getDate(1,b));
		    if (nDays<1) nOpen24++;
		    if (nDays<3) nOpen72++;
      }
    }
    
	  aPgAtoms[iIxAtom] = ++nReads;
	  
	  if (!oWebBeacons.isNull(2,b)) {
      nAgents++;
      sUserAgent = indentifyUserAgent(oWebBeacons.getString(2,b));
      if (oAgents.containsKey(sUserAgent)) {
        Float oCount = oAgents.get(sUserAgent);
        oAgents.remove(sUserAgent);
        oAgents.put(sUserAgent, new Float(oCount.floatValue()+1f));
      } else {
        oAgents.put(sUserAgent, new Float(1f));
      } // fi
    } // fi

  } // next
  
%>